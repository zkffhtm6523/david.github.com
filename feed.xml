<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://zkffhtm6523.github.io/</id><title>David의 Blog</title><subtitle>잔디밭 블로그</subtitle> <updated>2021-07-12T23:48:59+09:00</updated> <author> <name>David</name> <uri>https://zkffhtm6523.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://zkffhtm6523.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://zkffhtm6523.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 David </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.ico</logo> <entry><title>Linux Curl</title><link href="https://zkffhtm6523.github.io/posts/linux-curl/" rel="alternate" type="text/html" title="Linux Curl" /><published>2021-07-12T23:10:29+09:00</published> <updated>2021-07-12T23:10:29+09:00</updated> <id>https://zkffhtm6523.github.io/posts/linux-curl/</id> <content src="https://zkffhtm6523.github.io/posts/linux-curl/" /> <author> <name>David</name> </author> <category term="Linux" /> <category term="명령어" /> <summary> 리눅스 CURL : 웹 요청 명령어 CURL은 command line 기반의 웹 요청 도구 Unix, Linux, Windows 등의 주요 OS에서 구동 가능 HTTP / HTTPS / FTP / LDAP / SCP / TELNET / SMTP / POP3 등 핵심 프로코콜을 지원 download &amp;amp; upload 모두 가능 # curl 명령어 curl [options] &amp;lt;url&amp;gt; short long 설명 -k –insecure https 사이트를 SSL certificate 검증없이 연결한다. -... </summary> </entry> <entry><title>Async</title><link href="https://zkffhtm6523.github.io/posts/springboot-async/" rel="alternate" type="text/html" title="Async" /><published>2021-07-06T23:10:29+09:00</published> <updated>2021-07-10T18:37:59+09:00</updated> <id>https://zkffhtm6523.github.io/posts/springboot-async/</id> <content src="https://zkffhtm6523.github.io/posts/springboot-async/" /> <author> <name>David</name> </author> <category term="SpringBoot" /> <category term="Http" /> <summary> Java -&amp;gt; @Async 비동기 서비스 // @EnableAsync로 비동기 기능 활성화 // 비동기를 원하는 메소드는 public이어야 한다. @Configuration @Configuration @EnableAsync public class AsyncConfig extends AsyncConfigurerSupport { public Executor getAsyncExecutor() { // ThreadPoolTaskExecutor로 비동기로 호출하는 Thread 대한 설정을 한다 ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor(); // corePoolSize: 기본... </summary> </entry> <entry><title>WebClient</title><link href="https://zkffhtm6523.github.io/posts/springboot-webclient/" rel="alternate" type="text/html" title="WebClient" /><published>2021-06-28T23:10:29+09:00</published> <updated>2021-07-10T19:16:29+09:00</updated> <id>https://zkffhtm6523.github.io/posts/springboot-webclient/</id> <content src="https://zkffhtm6523.github.io/posts/springboot-webclient/" /> <author> <name>David</name> </author> <category term="SpringBoot" /> <category term="Http" /> <summary> WebClient vs RestTemplate RestTemplate은 WebClient 보다 이전에 나왔다 RestTemplate은 동기식이며, response가 올 때까지 다음 행동으로 넘어갈 수 없다 RestTemplate은 곧 deprecated 될 예정 WebClient dependencies { compile 'org.springframework.boot:spring-boot-starter-webflux' compile 'org.projectreactor:reactor-spring:1.0.1.RELEASE' } - WebClient Instance 생성 Webclient client = WebClient.build... </summary> </entry> <entry><title>Docker 명령어 정리</title><link href="https://zkffhtm6523.github.io/posts/server-docker-2/" rel="alternate" type="text/html" title="Docker 명령어 정리" /><published>2021-06-22T23:10:29+09:00</published> <updated>2021-06-22T23:46:52+09:00</updated> <id>https://zkffhtm6523.github.io/posts/server-docker-2/</id> <content src="https://zkffhtm6523.github.io/posts/server-docker-2/" /> <author> <name>David</name> </author> <category term="Server" /> <category term="Docker" /> <summary> Docker 명령어 정리 # docker 이미지 목록 docker images # docker 이미지 삭제 docker rmi python:latest # 파이썬 최근 이미지 삭제 # docker 프로세스 목록 docker ps # docker container 삭제(기동중 or 중지 모두) # 삭제 docker rm "container ID" # 강제 삭제 docker rm -f "container ID" # docker container 시동(최근에 사용한 것이 없으면 dockerhub에서 가져옴) docker run -it python:3.8.5 # -it 옵션을 통해서 파이썬 콘솔 즉시 진입 # docker container 중지 docker stop "container ID" ... </summary> </entry> <entry><title>CORS &amp; SOP</title><link href="https://zkffhtm6523.github.io/posts/cs-network-cors/" rel="alternate" type="text/html" title="CORS &amp; SOP" /><published>2021-06-07T22:10:29+09:00</published> <updated>2021-07-12T23:47:54+09:00</updated> <id>https://zkffhtm6523.github.io/posts/cs-network-cors/</id> <content src="https://zkffhtm6523.github.io/posts/cs-network-cors/" /> <author> <name>David</name> </author> <category term="Computer-Science" /> <category term="Network" /> <summary> CORS란? CORS : Cross-Origin Resource Sharing(교차 출처 자원 공유) 1. 출처(Origin)란? Javascript에서 console.log(location.origin) 입력하면 출처가 출력 2. SOP란? SOP(Same-Origin Policy) : 동일 출처 정책 3. CORS VS SOP https://taggle.kr https://taggle.kr/bookmark (O) https://taggle.kr:443/bookmarks?page=1 (O) http://taggle.kr (X) https://api.taggle.kr (X) https://taggle.kr:8080 (O &amp;amp; X)_IE만 다르게 취급함 ... </summary> </entry> </feed>
